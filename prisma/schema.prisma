// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  bio           String?
  website       String?
  socialLinks   Json?
  location      String?
  isVerified    Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  artworks      Artwork[]
  favorites     Artwork[] @relation("UserFavorites")
  followers     User[]    @relation("UserFollows")
  following     User[]    @relation("UserFollows")
  collections   Collection[]
  likes         Like[]
  comments      Comment[]
  artPreferences ArtPreference[]
  notifications Notification[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  parentId    String?
  parent      Category? @relation("CategoryToCategory", fields: [parentId], references: [id])
  subcategories Category[] @relation("CategoryToCategory")
  artworks    Artwork[]
  preferences ArtPreference[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Artwork {
  id          String    @id @default(cuid())
  title       String
  description String
  price       Float
  imageUrl    String
  categoryId  String
  category    Category  @relation(fields: [categoryId], references: [id])
  artistId    String
  artist      User      @relation(fields: [artistId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  collections Collection[]
  likes       Like[]
  comments    Comment[]
  favoritedBy User[]    @relation("UserFavorites")
  notifications Notification[]
}

model Collection {
  id          String    @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  artworks    Artwork[]
  user        User      @relation(fields: [userId], references: [id])
  userId      String
}

model Like {
  id        String   @id @default(cuid())
  artworkId String
  artwork   Artwork  @relation(fields: [artworkId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  artworkId String
  artwork   Artwork  @relation(fields: [artworkId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ArtPreference {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  categoryId  String
  category    Category  @relation(fields: [categoryId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Notification {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  artworkId   String
  artwork     Artwork   @relation(fields: [artworkId], references: [id])
  type        String    // e.g., "NEW_SIMILAR_ARTWORK", "PRICE_DROP", etc.
  read        Boolean   @default(false)
  createdAt   DateTime  @default(now())
}

enum Role {
  USER
  ARTIST
  ADMIN
} 